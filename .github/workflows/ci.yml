on: [push]
jobs:
  cppcheck:
    runs-on: ubuntu-latest
    container:
      image: d3lta12/c-utils-tools:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: "recursive"
      - name: Cache CMake files
        id: cache-cmake
        uses: actions/cache@v4
        env:
          cache-name: cache-cmake
        with:
          path: ./build
          key: ${{ env.cache-name }}-${{ hashFiles('**/CMakeLists.txt', '**.cmake') }}
      - name: Generate CMake cache
        if: ${{ steps.cache-cmake.outputs.cache-hit != 'true' }}
        run: cmake -B build -G Ninja
      - name: Cppcheck
        run: cmake --build build --target cppcheck
      - name: Upload Cppcheck Report
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: cppcheck-report
          path: build/cppcheck_report.xml
  unit-tests:
    runs-on: ubuntu-latest
    container:
      image: d3lta12/c-utils-tools:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: "recursive"
      - name: Cache CMake files
        id: cache-cmake
        uses: actions/cache@v4
        env:
          cache-name: cache-cmake
        with:
          path: ./build
          key: ${{ env.cache-name }}-${{ hashFiles('**/CMakeLists.txt', '**.cmake') }}
      - name: Generate CMake cache
        if: ${{ steps.cache-cmake.outputs.cache-hit != 'true' }}
        run: cmake -B build -G Ninja
      - name: Build tests
        run: cmake --build build -j$(nproc)
      - name: Execute tests
        run: ctest --test-dir build --verbose
      - name: Upload unit tests log
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: unit-tests-log
          path: build/Testing/Temporary/LastTest.log
      - name: Upload DoublyLinkedList valgrind report
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: test_DoublyLinkedList-valgrind-report
          path: build/Testing/Temporary/test_DoublyLinkedList-valgrind-report.xml
      - name: Upload SinglyLinkedList valgrind report
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: test_SinglyLinkedList-valgrind-report
          path: build/Testing/Temporary/test_SinglyLinkedList-valgrind-report.xml
      - name: Upload Queue valgrind report
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: test_Queue-valgrind-report
          path: build/Testing/Temporary/test_Queue-valgrind-report.xml
      - name: Upload Stack valgrind report
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: test_Stack-valgrind-report
          path: build/Testing/Temporary/test_Stack-valgrind-report.xml
  uncrustify:
    runs-on: ubuntu-latest
    container:
      image: d3lta12/c-utils-tools:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: "recursive"
      - name: Cache CMake files
        id: cache-cmake
        uses: actions/cache@v4
        env:
          cache-name: cache-cmake
        with:
          path: ./build
          key: ${{ env.cache-name }}-${{ hashFiles('**/CMakeLists.txt', '**.cmake') }}
      - name: Generate CMake cache
        if: ${{ steps.cache-cmake.outputs.cache-hit != 'true' }}
        run: cmake -B build -G Ninja
      - name: Crust check
        run: cmake --build build --target uncrustify-check
      - name: Upload Uncrustify Report
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: uncrustify-report
          path: build/uncrustify-report.txt
  deploy-docs:
    runs-on: ubuntu-latest
    container:
      image: node:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Doxygen
        run: apt update && apt install -y doxygen
      - name: Install Surge
        run: npm install --global surge
      - name: Make build directory
        run: mkdir build
      - name: Run Doxygen
        run: doxygen Doxyfile
      - name: Publish docs
        run: surge --project $(pwd)/build/docs/html --domain ${{ vars.SURGE_DOMAIN }} --token ${{ secrets.SURGE_TOKEN }}
